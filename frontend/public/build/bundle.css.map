{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Arg.svelte",
    "CommandOutput.svelte",
    "FileContent.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import VersionSelector from \"./VersionSelector.svelte\";\n    import FileTypeSelector from \"./FileTypeSelector.svelte\";\n    import FullCommand from \"./FullCommand.svelte\";\n    import FileContent from \"./FileContent.svelte\";\n    import CommandOutput from \"./CommandOutput.svelte\";\n    import Args from \"./Args.svelte\";\n    import Run from \"./Run.svelte\";\n    import Save from \"./Save.svelte\";\n    import {onMount} from 'svelte'\n\n    export let loading = false\n\n    export let snippet = {\n        id: null,\n        file: `{\"name\": \"Tom\"}`,\n        fileType: 'json',\n        args: [\n            {\n                name: '.name',\n                value: null,\n                hasValue: false\n            }\n        ],\n        version: null\n    }\n\n    onMount(async () => {\n        const splitPath = window.location.pathname.split(\"/\")\n        if (splitPath.length === 3) {\n            const id = splitPath[2]\n            console.log(`loading snippet ${id}`)\n            loading = true\n            await fetch(`http://localhost:8080/snippet?id=${id}`)\n                .then(r => {\n                    if (!r.ok) {\n                        if (r.status === 404) {\n                            throw new Error(\"Snippet not found\")\n                        }\n                        throw new Error(`${r.status} ${r.statusText}`)\n                    }\n                    return r\n                })\n                .then(r => r.json())\n                .then(data => {\n                    return data.snippet\n                })\n                .then(s => {\n                    console.log(`loaded snippet`, s)\n                    snippet = s\n                    loading = false\n                    return s\n                })\n                .catch(err => {\n                    output = err\n                })\n        }\n    })\n\n\n    export let output = null\n\n    let command;\n</script>\n\n<main>\n    <h1>Dasel Playground</h1>\n    <p>Playground environment for <a href=\"https://github.com/TomWright/dasel\" target=\"_blank\">Dasel</a>.</p>\n    <VersionSelector bind:version=\"{snippet.version}\"/>\n    <FileTypeSelector bind:fileType=\"{snippet.fileType}\"/>\n    <FileContent bind:content=\"{snippet.file}\"/>\n    <Args bind:args={snippet.args}/>\n    <FullCommand bind:command={command} snippet=\"{snippet}\"/>\n    <Run bind:snippet={snippet} bind:output={output}/>\n    <Save bind:snippet={snippet}/>\n    <CommandOutput output=\"{output}\"/>\n</main>\n\n<style>\n    main {\n        text-align: center;\n        padding: 1em;\n        max-width: 240px;\n        margin: 0 auto;\n    }\n\n    h1 {\n        color: #ff3e00;\n        text-transform: uppercase;\n        font-size: 4em;\n        font-weight: 100;\n\n        margin-block-start: 0.2em;\n        margin-block-end: 0.5em;\n    }\n\n    @media (min-width: 640px) {\n        main {\n            max-width: none;\n        }\n    }\n</style>",
    "<script>\n\texport let name = null;\n\texport let value = null;\n\texport let hasValue = false;\n\n\texport let deleteArg\n</script>\n\n<main>\n\t<label>\n\t\t<input type=\"text\" bind:value={name}>\n\t</label>\n\t{#if hasValue}\n\t\t<span>=</span>\n\t\t<label>\n\t\t\t<input type=\"text\" bind:value={value}>\n\t\t</label>\n\t{/if}\n\t<button on:click={deleteArg}>Delete</button>\n\t<label>\n\t\tHas value\n\t\t<input type=\"checkbox\" bind:checked={hasValue} on:change={() => {if (!hasValue) {value = null} else {value = ''}}}>\n\t</label>\n</main>\n\n<style>\nlabel {\n\tdisplay: inline-block;\n}\n</style>",
    "<script>\n\texport let output;\n</script>\n\n<main>\n\t<label>\n\t\tOutput\n\t\t<textarea name=\"command-output\"\n\t\t\t\t  autocorrect=\"off\" autocomplete=\"off\" disabled=\"disabled\"\n\t\t\t\t  autocapitalize=\"off\" spellcheck=\"false\" value=\"{output}\"></textarea>\n\t</label>\n</main>\n\n<style>\n\ttextarea {\n\t\tmargin-top: 0.5em;\n\t\twidth: 100%;\n\t\tresize: none;\n\t\theight: fit-content;\n\t\theight: 200px;\n\t}\n</style>",
    "<script>\n    export let content;\n</script>\n\n<main>\n    <label>\n        Input File\n\t\t<textarea name=\"file-content\" bind:value={content}\n                  autocorrect=\"off\" autocomplete=\"off\"\n                  autocapitalize=\"off\" spellcheck=\"false\"></textarea>\n    </label>\n</main>\n\n<style>\n    textarea {\n        margin-top: 0.5em;\n        width: 100%;\n        resize: none;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AA+EI,IAAI,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAClB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAEhB,kBAAkB,CAAE,KAAK,CACzB,gBAAgB,CAAE,KAAK,AAC3B,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACvB,IAAI,eAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACnB,CAAC,AACL,CAAC;AC1EL,KAAK,aAAC,CAAC,AACN,OAAO,CAAE,YAAY,AACtB,CAAC;ACdA,QAAQ,eAAC,CAAC,AACT,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,WAAW,CACnB,MAAM,CAAE,KAAK,AACd,CAAC;ACNE,QAAQ,eAAC,CAAC,AACN,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC"
}